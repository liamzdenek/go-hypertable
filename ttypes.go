// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package Client

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

//The "operation" for a ColumnPredicate
//
//EXACT_MATCH: compares the cell value for identity
//    (... WHERE column = "value")
//PREFIX_MATCH: compares the cell value for a prefix match
//    (... WHERE column =^ "prefix")
type ColumnPredicateOperation int64

const (
	ColumnPredicateOperation_EXACT_MATCH  ColumnPredicateOperation = 1
	ColumnPredicateOperation_PREFIX_MATCH ColumnPredicateOperation = 2
)

func (p ColumnPredicateOperation) String() string {
	switch p {
	case ColumnPredicateOperation_EXACT_MATCH:
		return "ColumnPredicateOperation_EXACT_MATCH"
	case ColumnPredicateOperation_PREFIX_MATCH:
		return "ColumnPredicateOperation_PREFIX_MATCH"
	}
	return "<UNSET>"
}

func ColumnPredicateOperationFromString(s string) (ColumnPredicateOperation, error) {
	switch s {
	case "ColumnPredicateOperation_EXACT_MATCH":
		return ColumnPredicateOperation_EXACT_MATCH, nil
	case "ColumnPredicateOperation_PREFIX_MATCH":
		return ColumnPredicateOperation_PREFIX_MATCH, nil
	}
	return ColumnPredicateOperation(math.MinInt32 - 1), fmt.Errorf("not a valid ColumnPredicateOperation string")
}

//State flags for a key
//
//Note for maintainers: the definition must be sync'ed with FLAG_* constants
//in src/cc/Hypertable/Lib/Key.h
//
//DELETE_ROW: row is pending delete
//
//DELETE_CF: column family is pending delete
//
//DELETE_CELL: key is pending delete
//
//DELETE_CELL_VERSION: delete specific timestamped version of key
//
//INSERT: key is an insert/update (default state)
type KeyFlag int64

const (
	KeyFlag_DELETE_ROW          KeyFlag = 0
	KeyFlag_DELETE_CF           KeyFlag = 1
	KeyFlag_DELETE_CELL         KeyFlag = 2
	KeyFlag_DELETE_CELL_VERSION KeyFlag = 3
	KeyFlag_INSERT              KeyFlag = 255
)

func (p KeyFlag) String() string {
	switch p {
	case KeyFlag_DELETE_ROW:
		return "KeyFlag_DELETE_ROW"
	case KeyFlag_DELETE_CF:
		return "KeyFlag_DELETE_CF"
	case KeyFlag_DELETE_CELL:
		return "KeyFlag_DELETE_CELL"
	case KeyFlag_DELETE_CELL_VERSION:
		return "KeyFlag_DELETE_CELL_VERSION"
	case KeyFlag_INSERT:
		return "KeyFlag_INSERT"
	}
	return "<UNSET>"
}

func KeyFlagFromString(s string) (KeyFlag, error) {
	switch s {
	case "KeyFlag_DELETE_ROW":
		return KeyFlag_DELETE_ROW, nil
	case "KeyFlag_DELETE_CF":
		return KeyFlag_DELETE_CF, nil
	case "KeyFlag_DELETE_CELL":
		return KeyFlag_DELETE_CELL, nil
	case "KeyFlag_DELETE_CELL_VERSION":
		return KeyFlag_DELETE_CELL_VERSION, nil
	case "KeyFlag_INSERT":
		return KeyFlag_INSERT, nil
	}
	return KeyFlag(math.MinInt32 - 1), fmt.Errorf("not a valid KeyFlag string")
}

//Mutator creation flags
//
//NO_LOG_SYNC: Do not sync the commit log
//IGNORE_UNKNOWN_CFS: Don't throw exception if mutator writes to unknown column family
type MutatorFlag int64

const (
	MutatorFlag_NO_LOG_SYNC        MutatorFlag = 1
	MutatorFlag_IGNORE_UNKNOWN_CFS MutatorFlag = 2
)

func (p MutatorFlag) String() string {
	switch p {
	case MutatorFlag_NO_LOG_SYNC:
		return "MutatorFlag_NO_LOG_SYNC"
	case MutatorFlag_IGNORE_UNKNOWN_CFS:
		return "MutatorFlag_IGNORE_UNKNOWN_CFS"
	}
	return "<UNSET>"
}

func MutatorFlagFromString(s string) (MutatorFlag, error) {
	switch s {
	case "MutatorFlag_NO_LOG_SYNC":
		return MutatorFlag_NO_LOG_SYNC, nil
	case "MutatorFlag_IGNORE_UNKNOWN_CFS":
		return MutatorFlag_IGNORE_UNKNOWN_CFS, nil
	}
	return MutatorFlag(math.MinInt32 - 1), fmt.Errorf("not a valid MutatorFlag string")
}

//Opaque ID for a Future object
//
type Future int64

//Opaque ID for a Namespace
//
type Namespace int64

//Opaque ID for a table scanner
//
//A scanner is recommended for returning large amount of data, say a full
//table dump.
type Scanner int64

//Opaque ID for a asynchronous table scanner
//
//A scanner is recommended for returning large amount of data, say a full
//table dump.
type ScannerAsync int64

//Opaque ID for a table mutator
//
//A mutator is recommended for injecting large amount of data (across
//many calls to mutator methods)
type Mutator int64

//Opaque ID for a asynchronous table mutator
//
//A mutator is recommended for injecting large amount of data (across
//many calls to mutator methods)
type MutatorAsync int64

//Value for table cell
//
//Use binary instead of string to generate efficient type for Java.
type Value []byte

//Alternative Cell interface for languages (e.g., Ruby) where user defined
//objects are much more expensive to create than builtin primitives. The order
//of members is the same as that in the <a href="#Struct_Cell">Cell</a> object
//definition.
//
//The returned cells (as arrays) contain Cell as array:
//["row_key", "column_family", "column_qualifier", "value", "timestamp"]
//
//Note, revision and cell flag are not returned for the array interface.
type CellAsArray []string

//Binary buffer holding serialized sequence of cells
type CellsSerialized []byte

type RowInterval struct {
	StartRow       string `thrift:"start_row,1"`
	StartInclusive bool   `thrift:"start_inclusive,2"`
	EndRow         string `thrift:"end_row,3"`
	EndInclusive   bool   `thrift:"end_inclusive,4"`
}

func NewRowInterval() *RowInterval {
	return &RowInterval{
		StartInclusive: true,

		EndInclusive: true,
	}
}

func (p *RowInterval) IsSetStartRow() bool {
	return p.StartRow != ""
}

func (p *RowInterval) IsSetStartInclusive() bool {
	return p.StartInclusive != true
}

func (p *RowInterval) IsSetEndRow() bool {
	return p.EndRow != ""
}

func (p *RowInterval) IsSetEndInclusive() bool {
	return p.EndInclusive != true
}

func (p *RowInterval) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RowInterval) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *RowInterval) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.StartInclusive = v
	}
	return nil
}

func (p *RowInterval) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *RowInterval) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.EndInclusive = v
	}
	return nil
}

func (p *RowInterval) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RowInterval"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RowInterval) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("start_row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:start_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.StartRow)); err != nil {
			return fmt.Errorf("%T.start_row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:start_row: %s", p, err)
		}
	}
	return err
}

func (p *RowInterval) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartInclusive() {
		if err := oprot.WriteFieldBegin("start_inclusive", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:start_inclusive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.StartInclusive)); err != nil {
			return fmt.Errorf("%T.start_inclusive (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:start_inclusive: %s", p, err)
		}
	}
	return err
}

func (p *RowInterval) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndRow() {
		if err := oprot.WriteFieldBegin("end_row", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:end_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.EndRow)); err != nil {
			return fmt.Errorf("%T.end_row (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:end_row: %s", p, err)
		}
	}
	return err
}

func (p *RowInterval) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndInclusive() {
		if err := oprot.WriteFieldBegin("end_inclusive", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:end_inclusive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.EndInclusive)); err != nil {
			return fmt.Errorf("%T.end_inclusive (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:end_inclusive: %s", p, err)
		}
	}
	return err
}

func (p *RowInterval) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RowInterval(%+v)", *p)
}

type CellInterval struct {
	StartRow       string `thrift:"start_row,1"`
	StartColumn    string `thrift:"start_column,2"`
	StartInclusive bool   `thrift:"start_inclusive,3"`
	EndRow         string `thrift:"end_row,4"`
	EndColumn      string `thrift:"end_column,5"`
	EndInclusive   bool   `thrift:"end_inclusive,6"`
}

func NewCellInterval() *CellInterval {
	return &CellInterval{
		StartInclusive: true,

		EndInclusive: true,
	}
}

func (p *CellInterval) IsSetStartRow() bool {
	return p.StartRow != ""
}

func (p *CellInterval) IsSetStartColumn() bool {
	return p.StartColumn != ""
}

func (p *CellInterval) IsSetStartInclusive() bool {
	return p.StartInclusive != true
}

func (p *CellInterval) IsSetEndRow() bool {
	return p.EndRow != ""
}

func (p *CellInterval) IsSetEndColumn() bool {
	return p.EndColumn != ""
}

func (p *CellInterval) IsSetEndInclusive() bool {
	return p.EndInclusive != true
}

func (p *CellInterval) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CellInterval) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *CellInterval) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.StartColumn = v
	}
	return nil
}

func (p *CellInterval) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.StartInclusive = v
	}
	return nil
}

func (p *CellInterval) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *CellInterval) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.EndColumn = v
	}
	return nil
}

func (p *CellInterval) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.EndInclusive = v
	}
	return nil
}

func (p *CellInterval) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CellInterval"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CellInterval) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("start_row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:start_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.StartRow)); err != nil {
			return fmt.Errorf("%T.start_row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:start_row: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartColumn() {
		if err := oprot.WriteFieldBegin("start_column", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:start_column: %s", p, err)
		}
		if err := oprot.WriteString(string(p.StartColumn)); err != nil {
			return fmt.Errorf("%T.start_column (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:start_column: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartInclusive() {
		if err := oprot.WriteFieldBegin("start_inclusive", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:start_inclusive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.StartInclusive)); err != nil {
			return fmt.Errorf("%T.start_inclusive (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:start_inclusive: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndRow() {
		if err := oprot.WriteFieldBegin("end_row", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:end_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.EndRow)); err != nil {
			return fmt.Errorf("%T.end_row (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:end_row: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndColumn() {
		if err := oprot.WriteFieldBegin("end_column", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:end_column: %s", p, err)
		}
		if err := oprot.WriteString(string(p.EndColumn)); err != nil {
			return fmt.Errorf("%T.end_column (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:end_column: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndInclusive() {
		if err := oprot.WriteFieldBegin("end_inclusive", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:end_inclusive: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.EndInclusive)); err != nil {
			return fmt.Errorf("%T.end_inclusive (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:end_inclusive: %s", p, err)
		}
	}
	return err
}

func (p *CellInterval) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CellInterval(%+v)", *p)
}

type ColumnPredicate struct {
	ColumnFamily string                   `thrift:"column_family,1"`
	Operation    ColumnPredicateOperation `thrift:"operation,2"`
	Value        string                   `thrift:"value,3"`
}

func NewColumnPredicate() *ColumnPredicate {
	return &ColumnPredicate{
		Operation: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *ColumnPredicate) IsSetColumnFamily() bool {
	return p.ColumnFamily != ""
}

func (p *ColumnPredicate) IsSetOperation() bool {
	return int64(p.Operation) != math.MinInt32-1
}

func (p *ColumnPredicate) IsSetValue() bool {
	return p.Value != ""
}

func (p *ColumnPredicate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnPredicate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ColumnFamily = v
	}
	return nil
}

func (p *ColumnPredicate) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Operation = ColumnPredicateOperation(v)
	}
	return nil
}

func (p *ColumnPredicate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *ColumnPredicate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnPredicate"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnPredicate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnFamily() {
		if err := oprot.WriteFieldBegin("column_family", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:column_family: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ColumnFamily)); err != nil {
			return fmt.Errorf("%T.column_family (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:column_family: %s", p, err)
		}
	}
	return err
}

func (p *ColumnPredicate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperation() {
		if err := oprot.WriteFieldBegin("operation", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:operation: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Operation)); err != nil {
			return fmt.Errorf("%T.operation (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:operation: %s", p, err)
		}
	}
	return err
}

func (p *ColumnPredicate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *ColumnPredicate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnPredicate(%+v)", *p)
}

type ScanSpec struct {
	RowIntervals       []*RowInterval     `thrift:"row_intervals,1"`
	CellIntervals      []*CellInterval    `thrift:"cell_intervals,2"`
	ReturnDeletes      bool               `thrift:"return_deletes,3"`
	Versions           int32              `thrift:"versions,4"`
	RowLimit           int32              `thrift:"row_limit,5"`
	StartTime          int64              `thrift:"start_time,6"`
	EndTime            int64              `thrift:"end_time,7"`
	Columns            []string           `thrift:"columns,8"`
	KeysOnly           bool               `thrift:"keys_only,9"`
	CellLimitPerFamily int32              `thrift:"cell_limit_per_family,10"`
	RowRegexp          string             `thrift:"row_regexp,11"`
	ValueRegexp        string             `thrift:"value_regexp,12"`
	ScanAndFilterRows  bool               `thrift:"scan_and_filter_rows,13"`
	CellLimit          int32              `thrift:"cell_limit,14"`
	RowOffset          int32              `thrift:"row_offset,15"`
	CellOffset         int32              `thrift:"cell_offset,16"`
	ColumnPredicates   []*ColumnPredicate `thrift:"column_predicates,17"`
}

func NewScanSpec() *ScanSpec {
	return &ScanSpec{
		ReturnDeletes: false,

		Versions: 0,

		RowLimit: 0,

		KeysOnly: false,

		CellLimit: 0,

		CellLimitPerFamily: 0,

		ScanAndFilterRows: false,

		RowOffset: 0,

		CellOffset: 0,
	}
}

func (p *ScanSpec) IsSetRowIntervals() bool {
	return p.RowIntervals != nil && len(p.RowIntervals) > 0
}

func (p *ScanSpec) IsSetCellIntervals() bool {
	return p.CellIntervals != nil && len(p.CellIntervals) > 0
}

func (p *ScanSpec) IsSetReturnDeletes() bool {
	return p.ReturnDeletes != false
}

func (p *ScanSpec) IsSetVersions() bool {
	return p.Versions != 0
}

func (p *ScanSpec) IsSetRowLimit() bool {
	return p.RowLimit != 0
}

func (p *ScanSpec) IsSetStartTime() bool {
	return p.StartTime != 0
}

func (p *ScanSpec) IsSetEndTime() bool {
	return p.EndTime != 0
}

func (p *ScanSpec) IsSetColumns() bool {
	return p.Columns != nil && len(p.Columns) > 0
}

func (p *ScanSpec) IsSetKeysOnly() bool {
	return p.KeysOnly != false
}

func (p *ScanSpec) IsSetCellLimit() bool {
	return p.CellLimit != 0
}

func (p *ScanSpec) IsSetCellLimitPerFamily() bool {
	return p.CellLimitPerFamily != 0
}

func (p *ScanSpec) IsSetRowRegexp() bool {
	return p.RowRegexp != ""
}

func (p *ScanSpec) IsSetValueRegexp() bool {
	return p.ValueRegexp != ""
}

func (p *ScanSpec) IsSetScanAndFilterRows() bool {
	return p.ScanAndFilterRows != false
}

func (p *ScanSpec) IsSetRowOffset() bool {
	return p.RowOffset != 0
}

func (p *ScanSpec) IsSetCellOffset() bool {
	return p.CellOffset != 0
}

func (p *ScanSpec) IsSetColumnPredicates() bool {
	return p.ColumnPredicates != nil && len(p.ColumnPredicates) > 0
}

func (p *ScanSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScanSpec) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.RowIntervals = make([]*RowInterval, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewRowInterval()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.RowIntervals = append(p.RowIntervals, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ScanSpec) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.CellIntervals = make([]*CellInterval, 0, size)
	for i := 0; i < size; i++ {
		_elem1 := NewCellInterval()
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1)
		}
		p.CellIntervals = append(p.CellIntervals, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ScanSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ReturnDeletes = v
	}
	return nil
}

func (p *ScanSpec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Versions = v
	}
	return nil
}

func (p *ScanSpec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.RowLimit = v
	}
	return nil
}

func (p *ScanSpec) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *ScanSpec) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *ScanSpec) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Columns = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem2 = v
		}
		p.Columns = append(p.Columns, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ScanSpec) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.KeysOnly = v
	}
	return nil
}

func (p *ScanSpec) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.CellLimit = v
	}
	return nil
}

func (p *ScanSpec) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.CellLimitPerFamily = v
	}
	return nil
}

func (p *ScanSpec) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.RowRegexp = v
	}
	return nil
}

func (p *ScanSpec) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.ValueRegexp = v
	}
	return nil
}

func (p *ScanSpec) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.ScanAndFilterRows = v
	}
	return nil
}

func (p *ScanSpec) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.RowOffset = v
	}
	return nil
}

func (p *ScanSpec) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.CellOffset = v
	}
	return nil
}

func (p *ScanSpec) readField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ColumnPredicates = make([]*ColumnPredicate, 0, size)
	for i := 0; i < size; i++ {
		_elem3 := NewColumnPredicate()
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3)
		}
		p.ColumnPredicates = append(p.ColumnPredicates, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ScanSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ScanSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.RowIntervals != nil {
		if p.IsSetRowIntervals() {
			if err := oprot.WriteFieldBegin("row_intervals", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:row_intervals: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowIntervals)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.RowIntervals {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:row_intervals: %s", p, err)
			}
		}
	}
	return err
}

func (p *ScanSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.CellIntervals != nil {
		if p.IsSetCellIntervals() {
			if err := oprot.WriteFieldBegin("cell_intervals", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:cell_intervals: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CellIntervals)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.CellIntervals {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:cell_intervals: %s", p, err)
			}
		}
	}
	return err
}

func (p *ScanSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReturnDeletes() {
		if err := oprot.WriteFieldBegin("return_deletes", thrift.BOOL, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:return_deletes: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ReturnDeletes)); err != nil {
			return fmt.Errorf("%T.return_deletes (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:return_deletes: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err := oprot.WriteFieldBegin("versions", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:versions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Versions)); err != nil {
			return fmt.Errorf("%T.versions (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:versions: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowLimit() {
		if err := oprot.WriteFieldBegin("row_limit", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:row_limit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.RowLimit)); err != nil {
			return fmt.Errorf("%T.row_limit (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:row_limit: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err := oprot.WriteFieldBegin("start_time", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:start_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
			return fmt.Errorf("%T.start_time (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:start_time: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err := oprot.WriteFieldBegin("end_time", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:end_time: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
			return fmt.Errorf("%T.end_time (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:end_time: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Columns {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *ScanSpec) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeysOnly() {
		if err := oprot.WriteFieldBegin("keys_only", thrift.BOOL, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:keys_only: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.KeysOnly)); err != nil {
			return fmt.Errorf("%T.keys_only (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:keys_only: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellLimitPerFamily() {
		if err := oprot.WriteFieldBegin("cell_limit_per_family", thrift.I32, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:cell_limit_per_family: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CellLimitPerFamily)); err != nil {
			return fmt.Errorf("%T.cell_limit_per_family (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:cell_limit_per_family: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowRegexp() {
		if err := oprot.WriteFieldBegin("row_regexp", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:row_regexp: %s", p, err)
		}
		if err := oprot.WriteString(string(p.RowRegexp)); err != nil {
			return fmt.Errorf("%T.row_regexp (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:row_regexp: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetValueRegexp() {
		if err := oprot.WriteFieldBegin("value_regexp", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:value_regexp: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ValueRegexp)); err != nil {
			return fmt.Errorf("%T.value_regexp (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:value_regexp: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetScanAndFilterRows() {
		if err := oprot.WriteFieldBegin("scan_and_filter_rows", thrift.BOOL, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:scan_and_filter_rows: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.ScanAndFilterRows)); err != nil {
			return fmt.Errorf("%T.scan_and_filter_rows (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:scan_and_filter_rows: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellLimit() {
		if err := oprot.WriteFieldBegin("cell_limit", thrift.I32, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:cell_limit: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CellLimit)); err != nil {
			return fmt.Errorf("%T.cell_limit (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:cell_limit: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRowOffset() {
		if err := oprot.WriteFieldBegin("row_offset", thrift.I32, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:row_offset: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.RowOffset)); err != nil {
			return fmt.Errorf("%T.row_offset (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:row_offset: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellOffset() {
		if err := oprot.WriteFieldBegin("cell_offset", thrift.I32, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:cell_offset: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CellOffset)); err != nil {
			return fmt.Errorf("%T.cell_offset (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:cell_offset: %s", p, err)
		}
	}
	return err
}

func (p *ScanSpec) writeField17(oprot thrift.TProtocol) (err error) {
	if p.ColumnPredicates != nil {
		if p.IsSetColumnPredicates() {
			if err := oprot.WriteFieldBegin("column_predicates", thrift.LIST, 17); err != nil {
				return fmt.Errorf("%T write field begin error 17:column_predicates: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnPredicates)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ColumnPredicates {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 17:column_predicates: %s", p, err)
			}
		}
	}
	return err
}

func (p *ScanSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanSpec(%+v)", *p)
}

type Key struct {
	Row             string  `thrift:"row,1"`
	ColumnFamily    string  `thrift:"column_family,2"`
	ColumnQualifier string  `thrift:"column_qualifier,3"`
	Timestamp       int64   `thrift:"timestamp,4"`
	Revision        int64   `thrift:"revision,5"`
	Flag            KeyFlag `thrift:"flag,6"`
}

func NewKey() *Key {
	return &Key{
		Flag: 255,
	}
}

func (p *Key) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *Key) IsSetRevision() bool {
	return p.Revision != 0
}

func (p *Key) IsSetFlag() bool {
	return int64(p.Flag) != math.MinInt32-1
}

func (p *Key) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Key) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Row = v
	}
	return nil
}

func (p *Key) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ColumnFamily = v
	}
	return nil
}

func (p *Key) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ColumnQualifier = v
	}
	return nil
}

func (p *Key) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Key) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Revision = v
	}
	return nil
}

func (p *Key) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Flag = KeyFlag(v)
	}
	return nil
}

func (p *Key) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Key"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Key) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Row)); err != nil {
		return fmt.Errorf("%T.row (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:row: %s", p, err)
	}
	return err
}

func (p *Key) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_family", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:column_family: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColumnFamily)); err != nil {
		return fmt.Errorf("%T.column_family (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:column_family: %s", p, err)
	}
	return err
}

func (p *Key) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_qualifier", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:column_qualifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColumnQualifier)); err != nil {
		return fmt.Errorf("%T.column_qualifier (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:column_qualifier: %s", p, err)
	}
	return err
}

func (p *Key) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *Key) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevision() {
		if err := oprot.WriteFieldBegin("revision", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:revision: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Revision)); err != nil {
			return fmt.Errorf("%T.revision (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:revision: %s", p, err)
		}
	}
	return err
}

func (p *Key) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFlag() {
		if err := oprot.WriteFieldBegin("flag", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:flag: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Flag)); err != nil {
			return fmt.Errorf("%T.flag (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:flag: %s", p, err)
		}
	}
	return err
}

func (p *Key) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Key(%+v)", *p)
}

type MutateSpec struct {
	Appname       string `thrift:"appname,1,required"`
	FlushInterval int32  `thrift:"flush_interval,2,required"`
	Flags         int32  `thrift:"flags,3,required"`
}

func NewMutateSpec() *MutateSpec {
	return &MutateSpec{
		Appname: "",

		FlushInterval: 1000,

		Flags: 2,
	}
}

func (p *MutateSpec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MutateSpec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Appname = v
	}
	return nil
}

func (p *MutateSpec) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FlushInterval = v
	}
	return nil
}

func (p *MutateSpec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Flags = v
	}
	return nil
}

func (p *MutateSpec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MutateSpec"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MutateSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:appname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Appname)); err != nil {
		return fmt.Errorf("%T.appname (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:appname: %s", p, err)
	}
	return err
}

func (p *MutateSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flush_interval", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:flush_interval: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FlushInterval)); err != nil {
		return fmt.Errorf("%T.flush_interval (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:flush_interval: %s", p, err)
	}
	return err
}

func (p *MutateSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flags", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:flags: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Flags)); err != nil {
		return fmt.Errorf("%T.flags (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:flags: %s", p, err)
	}
	return err
}

func (p *MutateSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutateSpec(%+v)", *p)
}

type Cell struct {
	Key   *Key  `thrift:"key,1"`
	Value Value `thrift:"value,2"`
}

func NewCell() *Cell {
	return &Cell{}
}

func (p *Cell) IsSetValue() bool {
	return p.Value != nil
}

func (p *Cell) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Cell) readField1(iprot thrift.TProtocol) error {
	p.Key = NewKey()
	if err := p.Key.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Key)
	}
	return nil
}

func (p *Cell) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Value = Value(v)
	}
	return nil
}

func (p *Cell) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Cell"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Cell) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Key != nil {
		if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
		}
		if err := p.Key.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Key)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:key: %s", p, err)
		}
	}
	return err
}

func (p *Cell) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if p.IsSetValue() {
			if err := oprot.WriteFieldBegin("value", thrift.BINARY, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:value: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Value); err != nil {
				return fmt.Errorf("%T.value (2) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:value: %s", p, err)
			}
		}
	}
	return err
}

func (p *Cell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Cell(%+v)", *p)
}

type Result struct {
	IsEmpty  bool    `thrift:"is_empty,1,required"`
	Id       int64   `thrift:"id,2,required"`
	IsScan   bool    `thrift:"is_scan,3,required"`
	IsError  bool    `thrift:"is_error,4,required"`
	ErrorA1  int32   `thrift:"error,5"`
	ErrorMsg string  `thrift:"error_msg,6"`
	Cells    []*Cell `thrift:"cells,7"`
}

func NewResult() *Result {
	return &Result{}
}

func (p *Result) IsSetErrorA1() bool {
	return p.ErrorA1 != 0
}

func (p *Result) IsSetErrorMsg() bool {
	return p.ErrorMsg != ""
}

func (p *Result) IsSetCells() bool {
	return p.Cells != nil && len(p.Cells) > 0
}

func (p *Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Result) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IsEmpty = v
	}
	return nil
}

func (p *Result) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Result) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IsScan = v
	}
	return nil
}

func (p *Result) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IsError = v
	}
	return nil
}

func (p *Result) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *Result) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.ErrorMsg = v
	}
	return nil
}

func (p *Result) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Cells = make([]*Cell, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := NewCell()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.Cells = append(p.Cells, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Result) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_empty", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:is_empty: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsEmpty)); err != nil {
		return fmt.Errorf("%T.is_empty (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:is_empty: %s", p, err)
	}
	return err
}

func (p *Result) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *Result) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_scan", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:is_scan: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsScan)); err != nil {
		return fmt.Errorf("%T.is_scan (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:is_scan: %s", p, err)
	}
	return err
}

func (p *Result) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:is_error: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsError)); err != nil {
		return fmt.Errorf("%T.is_error (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:is_error: %s", p, err)
	}
	return err
}

func (p *Result) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorA1() {
		if err := oprot.WriteFieldBegin("error", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorA1)); err != nil {
			return fmt.Errorf("%T.error (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error: %s", p, err)
		}
	}
	return err
}

func (p *Result) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:error_msg: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
			return fmt.Errorf("%T.error_msg (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:error_msg: %s", p, err)
		}
	}
	return err
}

func (p *Result) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Cells != nil {
		if p.IsSetCells() {
			if err := oprot.WriteFieldBegin("cells", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:cells: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cells)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Cells {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:cells: %s", p, err)
			}
		}
	}
	return err
}

func (p *Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result(%+v)", *p)
}

type ResultAsArrays struct {
	IsEmpty  bool          `thrift:"is_empty,1,required"`
	Id       int64         `thrift:"id,2,required"`
	IsScan   bool          `thrift:"is_scan,3,required"`
	IsError  bool          `thrift:"is_error,4,required"`
	ErrorA1  int32         `thrift:"error,5"`
	ErrorMsg string        `thrift:"error_msg,6"`
	Cells    []CellAsArray `thrift:"cells,7"`
}

func NewResultAsArrays() *ResultAsArrays {
	return &ResultAsArrays{}
}

func (p *ResultAsArrays) IsSetErrorA1() bool {
	return p.ErrorA1 != 0
}

func (p *ResultAsArrays) IsSetErrorMsg() bool {
	return p.ErrorMsg != ""
}

func (p *ResultAsArrays) IsSetCells() bool {
	return p.Cells != nil && len(p.Cells) > 0
}

func (p *ResultAsArrays) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResultAsArrays) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IsEmpty = v
	}
	return nil
}

func (p *ResultAsArrays) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ResultAsArrays) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IsScan = v
	}
	return nil
}

func (p *ResultAsArrays) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IsError = v
	}
	return nil
}

func (p *ResultAsArrays) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *ResultAsArrays) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.ErrorMsg = v
	}
	return nil
}

func (p *ResultAsArrays) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Cells = make([]CellAsArray, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list being: %s")
		}
		_elem5 := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem6 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s")
			} else {
				_elem6 = v
			}
			_elem5 = append(_elem5, _elem6)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s")
		}
		p.Cells = append(p.Cells, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ResultAsArrays) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultAsArrays"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ResultAsArrays) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_empty", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:is_empty: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsEmpty)); err != nil {
		return fmt.Errorf("%T.is_empty (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:is_empty: %s", p, err)
	}
	return err
}

func (p *ResultAsArrays) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *ResultAsArrays) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_scan", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:is_scan: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsScan)); err != nil {
		return fmt.Errorf("%T.is_scan (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:is_scan: %s", p, err)
	}
	return err
}

func (p *ResultAsArrays) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:is_error: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsError)); err != nil {
		return fmt.Errorf("%T.is_error (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:is_error: %s", p, err)
	}
	return err
}

func (p *ResultAsArrays) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorA1() {
		if err := oprot.WriteFieldBegin("error", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorA1)); err != nil {
			return fmt.Errorf("%T.error (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error: %s", p, err)
		}
	}
	return err
}

func (p *ResultAsArrays) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:error_msg: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
			return fmt.Errorf("%T.error_msg (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:error_msg: %s", p, err)
		}
	}
	return err
}

func (p *ResultAsArrays) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Cells != nil {
		if p.IsSetCells() {
			if err := oprot.WriteFieldBegin("cells", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:cells: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.LIST, len(p.Cells)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Cells {
				if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
					return fmt.Errorf("error writing list begin: %s")
				}
				for _, v := range v {
					if err := oprot.WriteString(string(v)); err != nil {
						return fmt.Errorf("%T. (0) field write error: %s", p)
					}
				}
				if err := oprot.WriteListEnd(); err != nil {
					return fmt.Errorf("error writing list end: %s")
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:cells: %s", p, err)
			}
		}
	}
	return err
}

func (p *ResultAsArrays) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultAsArrays(%+v)", *p)
}

type ResultSerialized struct {
	IsEmpty  bool            `thrift:"is_empty,1,required"`
	Id       int64           `thrift:"id,2,required"`
	IsScan   bool            `thrift:"is_scan,3,required"`
	IsError  bool            `thrift:"is_error,4,required"`
	ErrorA1  int32           `thrift:"error,5"`
	ErrorMsg string          `thrift:"error_msg,6"`
	Cells    CellsSerialized `thrift:"cells,7"`
}

func NewResultSerialized() *ResultSerialized {
	return &ResultSerialized{}
}

func (p *ResultSerialized) IsSetErrorA1() bool {
	return p.ErrorA1 != 0
}

func (p *ResultSerialized) IsSetErrorMsg() bool {
	return p.ErrorMsg != ""
}

func (p *ResultSerialized) IsSetCells() bool {
	return p.Cells != nil
}

func (p *ResultSerialized) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ResultSerialized) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IsEmpty = v
	}
	return nil
}

func (p *ResultSerialized) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ResultSerialized) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IsScan = v
	}
	return nil
}

func (p *ResultSerialized) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IsError = v
	}
	return nil
}

func (p *ResultSerialized) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ErrorA1 = v
	}
	return nil
}

func (p *ResultSerialized) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.ErrorMsg = v
	}
	return nil
}

func (p *ResultSerialized) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Cells = CellsSerialized(v)
	}
	return nil
}

func (p *ResultSerialized) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultSerialized"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ResultSerialized) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_empty", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:is_empty: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsEmpty)); err != nil {
		return fmt.Errorf("%T.is_empty (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:is_empty: %s", p, err)
	}
	return err
}

func (p *ResultSerialized) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *ResultSerialized) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_scan", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:is_scan: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsScan)); err != nil {
		return fmt.Errorf("%T.is_scan (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:is_scan: %s", p, err)
	}
	return err
}

func (p *ResultSerialized) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_error", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:is_error: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsError)); err != nil {
		return fmt.Errorf("%T.is_error (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:is_error: %s", p, err)
	}
	return err
}

func (p *ResultSerialized) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorA1() {
		if err := oprot.WriteFieldBegin("error", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:error: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorA1)); err != nil {
			return fmt.Errorf("%T.error (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:error: %s", p, err)
		}
	}
	return err
}

func (p *ResultSerialized) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMsg() {
		if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:error_msg: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ErrorMsg)); err != nil {
			return fmt.Errorf("%T.error_msg (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:error_msg: %s", p, err)
		}
	}
	return err
}

func (p *ResultSerialized) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Cells != nil {
		if p.IsSetCells() {
			if err := oprot.WriteFieldBegin("cells", thrift.BINARY, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:cells: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Cells); err != nil {
				return fmt.Errorf("%T.cells (7) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:cells: %s", p, err)
			}
		}
	}
	return err
}

func (p *ResultSerialized) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultSerialized(%+v)", *p)
}

type NamespaceListing struct {
	Name        string `thrift:"name,1,required"`
	IsNamespace bool   `thrift:"is_namespace,2,required"`
}

func NewNamespaceListing() *NamespaceListing {
	return &NamespaceListing{}
}

func (p *NamespaceListing) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NamespaceListing) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *NamespaceListing) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IsNamespace = v
	}
	return nil
}

func (p *NamespaceListing) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NamespaceListing"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NamespaceListing) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *NamespaceListing) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_namespace", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:is_namespace: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsNamespace)); err != nil {
		return fmt.Errorf("%T.is_namespace (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:is_namespace: %s", p, err)
	}
	return err
}

func (p *NamespaceListing) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NamespaceListing(%+v)", *p)
}

type TableSplit struct {
	StartRow  string `thrift:"start_row,1"`
	EndRow    string `thrift:"end_row,2"`
	Location  string `thrift:"location,3"`
	IpAddress string `thrift:"ip_address,4"`
	Hostname  string `thrift:"hostname,5"`
}

func NewTableSplit() *TableSplit {
	return &TableSplit{}
}

func (p *TableSplit) IsSetStartRow() bool {
	return p.StartRow != ""
}

func (p *TableSplit) IsSetEndRow() bool {
	return p.EndRow != ""
}

func (p *TableSplit) IsSetLocation() bool {
	return p.Location != ""
}

func (p *TableSplit) IsSetIpAddress() bool {
	return p.IpAddress != ""
}

func (p *TableSplit) IsSetHostname() bool {
	return p.Hostname != ""
}

func (p *TableSplit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TableSplit) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *TableSplit) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *TableSplit) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Location = v
	}
	return nil
}

func (p *TableSplit) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IpAddress = v
	}
	return nil
}

func (p *TableSplit) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Hostname = v
	}
	return nil
}

func (p *TableSplit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableSplit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TableSplit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("start_row", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:start_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.StartRow)); err != nil {
			return fmt.Errorf("%T.start_row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:start_row: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndRow() {
		if err := oprot.WriteFieldBegin("end_row", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:end_row: %s", p, err)
		}
		if err := oprot.WriteString(string(p.EndRow)); err != nil {
			return fmt.Errorf("%T.end_row (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:end_row: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:location: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Location)); err != nil {
			return fmt.Errorf("%T.location (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:location: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpAddress() {
		if err := oprot.WriteFieldBegin("ip_address", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:ip_address: %s", p, err)
		}
		if err := oprot.WriteString(string(p.IpAddress)); err != nil {
			return fmt.Errorf("%T.ip_address (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:ip_address: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHostname() {
		if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:hostname: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Hostname)); err != nil {
			return fmt.Errorf("%T.hostname (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:hostname: %s", p, err)
		}
	}
	return err
}

func (p *TableSplit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableSplit(%+v)", *p)
}

type ColumnFamily struct {
	Name        string `thrift:"name,1"`
	Ag          string `thrift:"ag,2"`
	MaxVersions int32  `thrift:"max_versions,3"`
	Ttl         string `thrift:"ttl,4"`
}

func NewColumnFamily() *ColumnFamily {
	return &ColumnFamily{}
}

func (p *ColumnFamily) IsSetName() bool {
	return p.Name != ""
}

func (p *ColumnFamily) IsSetAg() bool {
	return p.Ag != ""
}

func (p *ColumnFamily) IsSetMaxVersions() bool {
	return p.MaxVersions != 0
}

func (p *ColumnFamily) IsSetTtl() bool {
	return p.Ttl != ""
}

func (p *ColumnFamily) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnFamily) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *ColumnFamily) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Ag = v
	}
	return nil
}

func (p *ColumnFamily) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *ColumnFamily) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *ColumnFamily) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnFamily"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnFamily) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *ColumnFamily) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAg() {
		if err := oprot.WriteFieldBegin("ag", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ag: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Ag)); err != nil {
			return fmt.Errorf("%T.ag (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ag: %s", p, err)
		}
	}
	return err
}

func (p *ColumnFamily) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersions() {
		if err := oprot.WriteFieldBegin("max_versions", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:max_versions: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
			return fmt.Errorf("%T.max_versions (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:max_versions: %s", p, err)
		}
	}
	return err
}

func (p *ColumnFamily) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtl() {
		if err := oprot.WriteFieldBegin("ttl", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:ttl: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Ttl)); err != nil {
			return fmt.Errorf("%T.ttl (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:ttl: %s", p, err)
		}
	}
	return err
}

func (p *ColumnFamily) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnFamily(%+v)", *p)
}

type AccessGroup struct {
	Name        string          `thrift:"name,1"`
	InMemory    bool            `thrift:"in_memory,2"`
	Replication int16           `thrift:"replication,3"`
	Blocksize   int32           `thrift:"blocksize,4"`
	Compressor  string          `thrift:"compressor,5"`
	BloomFilter string          `thrift:"bloom_filter,6"`
	Columns     []*ColumnFamily `thrift:"columns,7"`
}

func NewAccessGroup() *AccessGroup {
	return &AccessGroup{}
}

func (p *AccessGroup) IsSetName() bool {
	return p.Name != ""
}

func (p *AccessGroup) IsSetInMemory() bool {
	return p.InMemory != false
}

func (p *AccessGroup) IsSetReplication() bool {
	return p.Replication != 0
}

func (p *AccessGroup) IsSetBlocksize() bool {
	return p.Blocksize != 0
}

func (p *AccessGroup) IsSetCompressor() bool {
	return p.Compressor != ""
}

func (p *AccessGroup) IsSetBloomFilter() bool {
	return p.BloomFilter != ""
}

func (p *AccessGroup) IsSetColumns() bool {
	return p.Columns != nil && len(p.Columns) > 0
}

func (p *AccessGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AccessGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *AccessGroup) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.InMemory = v
	}
	return nil
}

func (p *AccessGroup) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Replication = v
	}
	return nil
}

func (p *AccessGroup) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Blocksize = v
	}
	return nil
}

func (p *AccessGroup) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Compressor = v
	}
	return nil
}

func (p *AccessGroup) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.BloomFilter = v
	}
	return nil
}

func (p *AccessGroup) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Columns = make([]*ColumnFamily, 0, size)
	for i := 0; i < size; i++ {
		_elem7 := NewColumnFamily()
		if err := _elem7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem7)
		}
		p.Columns = append(p.Columns, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AccessGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccessGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AccessGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Name)); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInMemory() {
		if err := oprot.WriteFieldBegin("in_memory", thrift.BOOL, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:in_memory: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.InMemory)); err != nil {
			return fmt.Errorf("%T.in_memory (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:in_memory: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplication() {
		if err := oprot.WriteFieldBegin("replication", thrift.I16, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:replication: %s", p, err)
		}
		if err := oprot.WriteI16(int16(p.Replication)); err != nil {
			return fmt.Errorf("%T.replication (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:replication: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlocksize() {
		if err := oprot.WriteFieldBegin("blocksize", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:blocksize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Blocksize)); err != nil {
			return fmt.Errorf("%T.blocksize (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:blocksize: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompressor() {
		if err := oprot.WriteFieldBegin("compressor", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:compressor: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Compressor)); err != nil {
			return fmt.Errorf("%T.compressor (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:compressor: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBloomFilter() {
		if err := oprot.WriteFieldBegin("bloom_filter", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:bloom_filter: %s", p, err)
		}
		if err := oprot.WriteString(string(p.BloomFilter)); err != nil {
			return fmt.Errorf("%T.bloom_filter (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:bloom_filter: %s", p, err)
		}
	}
	return err
}

func (p *AccessGroup) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Columns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *AccessGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccessGroup(%+v)", *p)
}

type Schema struct {
	AccessGroups   map[string]*AccessGroup  `thrift:"access_groups,1"`
	ColumnFamilies map[string]*ColumnFamily `thrift:"column_families,2"`
}

func NewSchema() *Schema {
	return &Schema{}
}

func (p *Schema) IsSetAccessGroups() bool {
	return p.AccessGroups != nil && len(p.AccessGroups) > 0
}

func (p *Schema) IsSetColumnFamilies() bool {
	return p.ColumnFamilies != nil && len(p.ColumnFamilies) > 0
}

func (p *Schema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Schema) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.AccessGroups = make(map[string]*AccessGroup, size)
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key8 = v
		}
		_val9 := NewAccessGroup()
		if err := _val9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val9)
		}
		p.AccessGroups[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Schema) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.ColumnFamilies = make(map[string]*ColumnFamily, size)
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key10 = v
		}
		_val11 := NewColumnFamily()
		if err := _val11.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val11)
		}
		p.ColumnFamilies[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Schema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Schema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Schema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.AccessGroups != nil {
		if p.IsSetAccessGroups() {
			if err := oprot.WriteFieldBegin("access_groups", thrift.MAP, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:access_groups: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.AccessGroups)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.AccessGroups {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:access_groups: %s", p, err)
			}
		}
	}
	return err
}

func (p *Schema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ColumnFamilies != nil {
		if p.IsSetColumnFamilies() {
			if err := oprot.WriteFieldBegin("column_families", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:column_families: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ColumnFamilies)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.ColumnFamilies {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:column_families: %s", p, err)
			}
		}
	}
	return err
}

func (p *Schema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Schema(%+v)", *p)
}

type ClientException struct {
	Code    int32  `thrift:"code,1"`
	Message string `thrift:"message,2"`
}

func NewClientException() *ClientException {
	return &ClientException{}
}

func (p *ClientException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ClientException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Code = v
	}
	return nil
}

func (p *ClientException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *ClientException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ClientException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return fmt.Errorf("%T.code (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:code: %s", p, err)
	}
	return err
}

func (p *ClientException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:message: %s", p, err)
	}
	return err
}

func (p *ClientException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientException(%+v)", *p)
}
