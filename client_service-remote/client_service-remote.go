// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"Client"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void namespace_create(string ns)")
	fmt.Fprintln(os.Stderr, "  void create_namespace(string ns)")
	fmt.Fprintln(os.Stderr, "  void create_table(Namespace ns, string table_name, string schema)")
	fmt.Fprintln(os.Stderr, "  void table_create(Namespace ns, string table_name, string schema)")
	fmt.Fprintln(os.Stderr, "  void alter_table(Namespace ns, string table_name, string schema)")
	fmt.Fprintln(os.Stderr, "  void table_alter(Namespace ns, string table_name, string schema)")
	fmt.Fprintln(os.Stderr, "  void refresh_table(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  Namespace namespace_open(string ns)")
	fmt.Fprintln(os.Stderr, "  Namespace open_namespace(string ns)")
	fmt.Fprintln(os.Stderr, "  void namespace_close(Namespace ns)")
	fmt.Fprintln(os.Stderr, "  void close_namespace(Namespace ns)")
	fmt.Fprintln(os.Stderr, "  Future future_open(i32 capacity)")
	fmt.Fprintln(os.Stderr, "  Future open_future(i32 capacity)")
	fmt.Fprintln(os.Stderr, "  void future_cancel(Future ff)")
	fmt.Fprintln(os.Stderr, "  void cancel_future(Future ff)")
	fmt.Fprintln(os.Stderr, "  Result future_get_result(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  Result get_future_result(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  ResultAsArrays future_get_result_as_arrays(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  ResultAsArrays get_future_result_as_arrays(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  ResultSerialized future_get_result_serialized(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  ResultSerialized get_future_result_serialized(Future ff, i32 timeout_millis)")
	fmt.Fprintln(os.Stderr, "  bool future_is_empty(Future ff)")
	fmt.Fprintln(os.Stderr, "  bool future_is_full(Future ff)")
	fmt.Fprintln(os.Stderr, "  bool future_is_cancelled(Future ff)")
	fmt.Fprintln(os.Stderr, "  bool future_has_outstanding(Future ff)")
	fmt.Fprintln(os.Stderr, "  void future_close(Future ff)")
	fmt.Fprintln(os.Stderr, "  void close_future(Future ff)")
	fmt.Fprintln(os.Stderr, "  Scanner scanner_open(Namespace ns, string table_name, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  Scanner open_scanner(Namespace ns, string table_name, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  ScannerAsync async_scanner_open(Namespace ns, string table_name, Future future, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  ScannerAsync open_scanner_async(Namespace ns, string table_name, Future future, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  void scanner_close(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  void close_scanner(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  void async_scanner_cancel(ScannerAsync scanner)")
	fmt.Fprintln(os.Stderr, "  void cancel_scanner_async(ScannerAsync scanner)")
	fmt.Fprintln(os.Stderr, "  void async_scanner_close(ScannerAsync scanner)")
	fmt.Fprintln(os.Stderr, "  void close_scanner_async(ScannerAsync scanner)")
	fmt.Fprintln(os.Stderr, "   scanner_get_cells(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   next_cells(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   scanner_get_cells_as_arrays(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   next_cells_as_arrays(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized scanner_get_cells_serialized(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized next_cells_serialized(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   scanner_get_row(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   next_row(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   scanner_get_row_as_arrays(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   next_row_as_arrays(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized scanner_get_row_serialized(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized next_row_serialized(Scanner scanner)")
	fmt.Fprintln(os.Stderr, "   get_row(Namespace ns, string table_name, string row)")
	fmt.Fprintln(os.Stderr, "   get_row_as_arrays(Namespace ns, string name, string row)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized get_row_serialized(Namespace ns, string table_name, string row)")
	fmt.Fprintln(os.Stderr, "  Value get_cell(Namespace ns, string table_name, string row, string column)")
	fmt.Fprintln(os.Stderr, "   get_cells(Namespace ns, string table_name, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "   get_cells_as_arrays(Namespace ns, string name, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  CellsSerialized get_cells_serialized(Namespace ns, string name, ScanSpec scan_spec)")
	fmt.Fprintln(os.Stderr, "  void shared_mutator_refresh(Namespace ns, string table_name, MutateSpec mutate_spec)")
	fmt.Fprintln(os.Stderr, "  void refresh_shared_mutator(Namespace ns, string table_name, MutateSpec mutate_spec)")
	fmt.Fprintln(os.Stderr, "  void shared_mutator_set_cells(Namespace ns, string table_name, MutateSpec mutate_spec,  cells)")
	fmt.Fprintln(os.Stderr, "  void offer_cells(Namespace ns, string table_name, MutateSpec mutate_spec,  cells)")
	fmt.Fprintln(os.Stderr, "  void shared_mutator_set_cells_as_arrays(Namespace ns, string table_name, MutateSpec mutate_spec,  cells)")
	fmt.Fprintln(os.Stderr, "  void offer_cells_as_arrays(Namespace ns, string table_name, MutateSpec mutate_spec,  cells)")
	fmt.Fprintln(os.Stderr, "  void shared_mutator_set_cell(Namespace ns, string table_name, MutateSpec mutate_spec, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void offer_cell(Namespace ns, string table_name, MutateSpec mutate_spec, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void shared_mutator_set_cell_as_array(Namespace ns, string table_name, MutateSpec mutate_spec, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  void offer_cell_as_array(Namespace ns, string table_name, MutateSpec mutate_spec, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  Mutator mutator_open(Namespace ns, string table_name, i32 flags, i32 flush_interval)")
	fmt.Fprintln(os.Stderr, "  Mutator open_mutator(Namespace ns, string table_name, i32 flags, i32 flush_interval)")
	fmt.Fprintln(os.Stderr, "  MutatorAsync async_mutator_open(Namespace ns, string table_name, Future future, i32 flags)")
	fmt.Fprintln(os.Stderr, "  MutatorAsync open_mutator_async(Namespace ns, string table_name, Future future, i32 flags)")
	fmt.Fprintln(os.Stderr, "  void mutator_close(Mutator mutator)")
	fmt.Fprintln(os.Stderr, "  void close_mutator(Mutator mutator)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_cancel(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  void cancel_mutator_async(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_close(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  void close_mutator_async(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  void mutator_set_cell(Mutator mutator, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void set_cell(Namespace ns, string table_name, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void mutator_set_cell_as_array(Mutator mutator, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  void set_cell_as_array(Namespace ns, string table_name, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  void mutator_set_cells(Mutator mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void set_cells(Namespace ns, string table_name,  cells)")
	fmt.Fprintln(os.Stderr, "  void mutator_set_cells_as_arrays(Mutator mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void set_cells_as_arrays(Namespace ns, string table_name,  cells)")
	fmt.Fprintln(os.Stderr, "  void mutator_set_cells_serialized(Mutator mutator, CellsSerialized cells, bool flush)")
	fmt.Fprintln(os.Stderr, "  void set_cells_serialized(Namespace ns, string table_name, CellsSerialized cells)")
	fmt.Fprintln(os.Stderr, "  void mutator_flush(Mutator mutator)")
	fmt.Fprintln(os.Stderr, "  void flush_mutator(Mutator mutator)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_set_cell(MutatorAsync mutator, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void set_cell_async(MutatorAsync mutator, Cell cell)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_set_cell_as_array(MutatorAsync mutator, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  void set_cell_as_array_async(MutatorAsync mutator, CellAsArray cell)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_set_cells(MutatorAsync mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void set_cells_async(MutatorAsync mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_set_cells_as_arrays(MutatorAsync mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void set_cells_as_arrays_async(MutatorAsync mutator,  cells)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_set_cells_serialized(MutatorAsync mutator, CellsSerialized cells, bool flush)")
	fmt.Fprintln(os.Stderr, "  void set_cells_serialized_async(MutatorAsync mutator, CellsSerialized cells, bool flush)")
	fmt.Fprintln(os.Stderr, "  void async_mutator_flush(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  void flush_mutator_async(MutatorAsync mutator)")
	fmt.Fprintln(os.Stderr, "  bool namespace_exists(string ns)")
	fmt.Fprintln(os.Stderr, "  bool exists_namespace(string ns)")
	fmt.Fprintln(os.Stderr, "  bool exists_table(Namespace ns, string name)")
	fmt.Fprintln(os.Stderr, "  bool table_exists(Namespace ns, string name)")
	fmt.Fprintln(os.Stderr, "  string table_get_id(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  string get_table_id(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  string table_get_schema_str(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  string get_schema_str(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  string table_get_schema_str_with_ids(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  string get_schema_str_with_ids(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  Schema table_get_schema(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  Schema get_schema(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_tables(Namespace ns)")
	fmt.Fprintln(os.Stderr, "   namespace_get_listing(Namespace ns)")
	fmt.Fprintln(os.Stderr, "   get_listing(Namespace ns)")
	fmt.Fprintln(os.Stderr, "   table_get_splits(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_table_splits(Namespace ns, string table_name)")
	fmt.Fprintln(os.Stderr, "  void namespace_drop(string ns, bool if_exists)")
	fmt.Fprintln(os.Stderr, "  void drop_namespace(string ns, bool if_exists)")
	fmt.Fprintln(os.Stderr, "  void rename_table(Namespace ns, string name, string new_name)")
	fmt.Fprintln(os.Stderr, "  void table_rename(Namespace ns, string name, string new_name)")
	fmt.Fprintln(os.Stderr, "  void drop_table(Namespace ns, string name, bool if_exists)")
	fmt.Fprintln(os.Stderr, "  void table_drop(Namespace ns, string name, bool if_exists)")
	fmt.Fprintln(os.Stderr, "  string generate_guid()")
	fmt.Fprintln(os.Stderr, "  string create_cell_unique(Namespace ns, string table_name, Key key, string value)")
	fmt.Fprintln(os.Stderr, "  string error_get_text(i32 error_code)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := Client.NewClientServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "namespace_create":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NamespaceCreate requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.NamespaceCreate(value0))
		fmt.Print("\n")
		break
	case "create_namespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CreateNamespace(value0))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 3 args")
			flag.Usage()
		}
		argvalue0, err567 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err567 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.CreateTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "table_create":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TableCreate requires 3 args")
			flag.Usage()
		}
		argvalue0, err570 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err570 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.TableCreate(value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0, err573 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err573 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AlterTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "table_alter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TableAlter requires 3 args")
			flag.Usage()
		}
		argvalue0, err576 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err576 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.TableAlter(value0, value1, value2))
		fmt.Print("\n")
		break
	case "refresh_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RefreshTable requires 2 args")
			flag.Usage()
		}
		argvalue0, err579 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err579 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RefreshTable(value0, value1))
		fmt.Print("\n")
		break
	case "namespace_open":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NamespaceOpen requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.NamespaceOpen(value0))
		fmt.Print("\n")
		break
	case "open_namespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.OpenNamespace(value0))
		fmt.Print("\n")
		break
	case "namespace_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NamespaceClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err583 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err583 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		fmt.Print(client.NamespaceClose(value0))
		fmt.Print("\n")
		break
	case "close_namespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0, err584 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err584 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		fmt.Print(client.CloseNamespace(value0))
		fmt.Print("\n")
		break
	case "future_open":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureOpen requires 1 args")
			flag.Usage()
		}
		tmp0, err585 := (strconv.Atoi(flag.Arg(1)))
		if err585 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.FutureOpen(value0))
		fmt.Print("\n")
		break
	case "open_future":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenFuture requires 1 args")
			flag.Usage()
		}
		tmp0, err586 := (strconv.Atoi(flag.Arg(1)))
		if err586 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.OpenFuture(value0))
		fmt.Print("\n")
		break
	case "future_cancel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureCancel requires 1 args")
			flag.Usage()
		}
		argvalue0, err587 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err587 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureCancel(value0))
		fmt.Print("\n")
		break
	case "cancel_future":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelFuture requires 1 args")
			flag.Usage()
		}
		argvalue0, err588 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err588 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.CancelFuture(value0))
		fmt.Print("\n")
		break
	case "future_get_result":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FutureGetResult requires 2 args")
			flag.Usage()
		}
		argvalue0, err589 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err589 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err590 := (strconv.Atoi(flag.Arg(2)))
		if err590 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FutureGetResult(value0, value1))
		fmt.Print("\n")
		break
	case "get_future_result":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFutureResult requires 2 args")
			flag.Usage()
		}
		argvalue0, err591 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err591 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err592 := (strconv.Atoi(flag.Arg(2)))
		if err592 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetFutureResult(value0, value1))
		fmt.Print("\n")
		break
	case "future_get_result_as_arrays":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FutureGetResultAsArrays requires 2 args")
			flag.Usage()
		}
		argvalue0, err593 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err593 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err594 := (strconv.Atoi(flag.Arg(2)))
		if err594 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FutureGetResultAsArrays(value0, value1))
		fmt.Print("\n")
		break
	case "get_future_result_as_arrays":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFutureResultAsArrays requires 2 args")
			flag.Usage()
		}
		argvalue0, err595 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err595 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err596 := (strconv.Atoi(flag.Arg(2)))
		if err596 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetFutureResultAsArrays(value0, value1))
		fmt.Print("\n")
		break
	case "future_get_result_serialized":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FutureGetResultSerialized requires 2 args")
			flag.Usage()
		}
		argvalue0, err597 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err597 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err598 := (strconv.Atoi(flag.Arg(2)))
		if err598 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.FutureGetResultSerialized(value0, value1))
		fmt.Print("\n")
		break
	case "get_future_result_serialized":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFutureResultSerialized requires 2 args")
			flag.Usage()
		}
		argvalue0, err599 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err599 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		tmp1, err600 := (strconv.Atoi(flag.Arg(2)))
		if err600 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetFutureResultSerialized(value0, value1))
		fmt.Print("\n")
		break
	case "future_is_empty":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureIsEmpty requires 1 args")
			flag.Usage()
		}
		argvalue0, err601 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err601 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureIsEmpty(value0))
		fmt.Print("\n")
		break
	case "future_is_full":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureIsFull requires 1 args")
			flag.Usage()
		}
		argvalue0, err602 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err602 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureIsFull(value0))
		fmt.Print("\n")
		break
	case "future_is_cancelled":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureIsCancelled requires 1 args")
			flag.Usage()
		}
		argvalue0, err603 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err603 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureIsCancelled(value0))
		fmt.Print("\n")
		break
	case "future_has_outstanding":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureHasOutstanding requires 1 args")
			flag.Usage()
		}
		argvalue0, err604 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err604 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureHasOutstanding(value0))
		fmt.Print("\n")
		break
	case "future_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FutureClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err605 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err605 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.FutureClose(value0))
		fmt.Print("\n")
		break
	case "close_future":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseFuture requires 1 args")
			flag.Usage()
		}
		argvalue0, err606 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err606 != nil {
			Usage()
			return
		}
		value0 := Client.Future(argvalue0)
		fmt.Print(client.CloseFuture(value0))
		fmt.Print("\n")
		break
	case "scanner_open":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ScannerOpen requires 3 args")
			flag.Usage()
		}
		argvalue0, err607 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err607 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg609 := flag.Arg(3)
		mbTrans610 := thrift.NewTMemoryBufferLen(len(arg609))
		defer mbTrans610.Close()
		_, err611 := mbTrans610.WriteString(arg609)
		if err611 != nil {
			Usage()
			return
		}
		factory612 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt613 := factory612.GetProtocol(mbTrans610)
		argvalue2 := Client.NewScanSpec()
		err614 := argvalue2.Read(jsProt613)
		if err614 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ScannerOpen(value0, value1, value2))
		fmt.Print("\n")
		break
	case "open_scanner":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "OpenScanner requires 3 args")
			flag.Usage()
		}
		argvalue0, err615 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err615 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg617 := flag.Arg(3)
		mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
		defer mbTrans618.Close()
		_, err619 := mbTrans618.WriteString(arg617)
		if err619 != nil {
			Usage()
			return
		}
		factory620 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt621 := factory620.GetProtocol(mbTrans618)
		argvalue2 := Client.NewScanSpec()
		err622 := argvalue2.Read(jsProt621)
		if err622 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.OpenScanner(value0, value1, value2))
		fmt.Print("\n")
		break
	case "async_scanner_open":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AsyncScannerOpen requires 4 args")
			flag.Usage()
		}
		argvalue0, err623 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err623 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err625 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err625 != nil {
			Usage()
			return
		}
		value2 := Client.Future(argvalue2)
		arg626 := flag.Arg(4)
		mbTrans627 := thrift.NewTMemoryBufferLen(len(arg626))
		defer mbTrans627.Close()
		_, err628 := mbTrans627.WriteString(arg626)
		if err628 != nil {
			Usage()
			return
		}
		factory629 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt630 := factory629.GetProtocol(mbTrans627)
		argvalue3 := Client.NewScanSpec()
		err631 := argvalue3.Read(jsProt630)
		if err631 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AsyncScannerOpen(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "open_scanner_async":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OpenScannerAsync requires 4 args")
			flag.Usage()
		}
		argvalue0, err632 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err632 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err634 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err634 != nil {
			Usage()
			return
		}
		value2 := Client.Future(argvalue2)
		arg635 := flag.Arg(4)
		mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
		defer mbTrans636.Close()
		_, err637 := mbTrans636.WriteString(arg635)
		if err637 != nil {
			Usage()
			return
		}
		factory638 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt639 := factory638.GetProtocol(mbTrans636)
		argvalue3 := Client.NewScanSpec()
		err640 := argvalue3.Read(jsProt639)
		if err640 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.OpenScannerAsync(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scanner_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err641 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err641 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerClose(value0))
		fmt.Print("\n")
		break
	case "close_scanner":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
			flag.Usage()
		}
		argvalue0, err642 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err642 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.CloseScanner(value0))
		fmt.Print("\n")
		break
	case "async_scanner_cancel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AsyncScannerCancel requires 1 args")
			flag.Usage()
		}
		argvalue0, err643 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err643 != nil {
			Usage()
			return
		}
		value0 := Client.ScannerAsync(argvalue0)
		fmt.Print(client.AsyncScannerCancel(value0))
		fmt.Print("\n")
		break
	case "cancel_scanner_async":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelScannerAsync requires 1 args")
			flag.Usage()
		}
		argvalue0, err644 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err644 != nil {
			Usage()
			return
		}
		value0 := Client.ScannerAsync(argvalue0)
		fmt.Print(client.CancelScannerAsync(value0))
		fmt.Print("\n")
		break
	case "async_scanner_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AsyncScannerClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err645 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err645 != nil {
			Usage()
			return
		}
		value0 := Client.ScannerAsync(argvalue0)
		fmt.Print(client.AsyncScannerClose(value0))
		fmt.Print("\n")
		break
	case "close_scanner_async":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseScannerAsync requires 1 args")
			flag.Usage()
		}
		argvalue0, err646 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err646 != nil {
			Usage()
			return
		}
		value0 := Client.ScannerAsync(argvalue0)
		fmt.Print(client.CloseScannerAsync(value0))
		fmt.Print("\n")
		break
	case "scanner_get_cells":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetCells requires 1 args")
			flag.Usage()
		}
		argvalue0, err647 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err647 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetCells(value0))
		fmt.Print("\n")
		break
	case "next_cells":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextCells requires 1 args")
			flag.Usage()
		}
		argvalue0, err648 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err648 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextCells(value0))
		fmt.Print("\n")
		break
	case "scanner_get_cells_as_arrays":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetCellsAsArrays requires 1 args")
			flag.Usage()
		}
		argvalue0, err649 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err649 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetCellsAsArrays(value0))
		fmt.Print("\n")
		break
	case "next_cells_as_arrays":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextCellsAsArrays requires 1 args")
			flag.Usage()
		}
		argvalue0, err650 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err650 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextCellsAsArrays(value0))
		fmt.Print("\n")
		break
	case "scanner_get_cells_serialized":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetCellsSerialized requires 1 args")
			flag.Usage()
		}
		argvalue0, err651 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err651 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetCellsSerialized(value0))
		fmt.Print("\n")
		break
	case "next_cells_serialized":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextCellsSerialized requires 1 args")
			flag.Usage()
		}
		argvalue0, err652 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err652 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextCellsSerialized(value0))
		fmt.Print("\n")
		break
	case "scanner_get_row":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetRow requires 1 args")
			flag.Usage()
		}
		argvalue0, err653 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err653 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetRow(value0))
		fmt.Print("\n")
		break
	case "next_row":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextRow requires 1 args")
			flag.Usage()
		}
		argvalue0, err654 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err654 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextRow(value0))
		fmt.Print("\n")
		break
	case "scanner_get_row_as_arrays":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetRowAsArrays requires 1 args")
			flag.Usage()
		}
		argvalue0, err655 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err655 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetRowAsArrays(value0))
		fmt.Print("\n")
		break
	case "next_row_as_arrays":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextRowAsArrays requires 1 args")
			flag.Usage()
		}
		argvalue0, err656 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err656 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextRowAsArrays(value0))
		fmt.Print("\n")
		break
	case "scanner_get_row_serialized":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGetRowSerialized requires 1 args")
			flag.Usage()
		}
		argvalue0, err657 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err657 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.ScannerGetRowSerialized(value0))
		fmt.Print("\n")
		break
	case "next_row_serialized":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NextRowSerialized requires 1 args")
			flag.Usage()
		}
		argvalue0, err658 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err658 != nil {
			Usage()
			return
		}
		value0 := Client.Scanner(argvalue0)
		fmt.Print(client.NextRowSerialized(value0))
		fmt.Print("\n")
		break
	case "get_row":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRow requires 3 args")
			flag.Usage()
		}
		argvalue0, err659 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err659 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetRow(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_row_as_arrays":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRowAsArrays requires 3 args")
			flag.Usage()
		}
		argvalue0, err662 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err662 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetRowAsArrays(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_row_serialized":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRowSerialized requires 3 args")
			flag.Usage()
		}
		argvalue0, err665 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err665 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetRowSerialized(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_cell":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetCell requires 4 args")
			flag.Usage()
		}
		argvalue0, err668 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err668 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetCell(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_cells":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetCells requires 3 args")
			flag.Usage()
		}
		argvalue0, err672 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err672 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg674 := flag.Arg(3)
		mbTrans675 := thrift.NewTMemoryBufferLen(len(arg674))
		defer mbTrans675.Close()
		_, err676 := mbTrans675.WriteString(arg674)
		if err676 != nil {
			Usage()
			return
		}
		factory677 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt678 := factory677.GetProtocol(mbTrans675)
		argvalue2 := Client.NewScanSpec()
		err679 := argvalue2.Read(jsProt678)
		if err679 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetCells(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_cells_as_arrays":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetCellsAsArrays requires 3 args")
			flag.Usage()
		}
		argvalue0, err680 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err680 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg682 := flag.Arg(3)
		mbTrans683 := thrift.NewTMemoryBufferLen(len(arg682))
		defer mbTrans683.Close()
		_, err684 := mbTrans683.WriteString(arg682)
		if err684 != nil {
			Usage()
			return
		}
		factory685 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt686 := factory685.GetProtocol(mbTrans683)
		argvalue2 := Client.NewScanSpec()
		err687 := argvalue2.Read(jsProt686)
		if err687 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetCellsAsArrays(value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_cells_serialized":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetCellsSerialized requires 3 args")
			flag.Usage()
		}
		argvalue0, err688 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err688 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg690 := flag.Arg(3)
		mbTrans691 := thrift.NewTMemoryBufferLen(len(arg690))
		defer mbTrans691.Close()
		_, err692 := mbTrans691.WriteString(arg690)
		if err692 != nil {
			Usage()
			return
		}
		factory693 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt694 := factory693.GetProtocol(mbTrans691)
		argvalue2 := Client.NewScanSpec()
		err695 := argvalue2.Read(jsProt694)
		if err695 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetCellsSerialized(value0, value1, value2))
		fmt.Print("\n")
		break
	case "shared_mutator_refresh":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SharedMutatorRefresh requires 3 args")
			flag.Usage()
		}
		argvalue0, err696 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err696 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg698 := flag.Arg(3)
		mbTrans699 := thrift.NewTMemoryBufferLen(len(arg698))
		defer mbTrans699.Close()
		_, err700 := mbTrans699.WriteString(arg698)
		if err700 != nil {
			Usage()
			return
		}
		factory701 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt702 := factory701.GetProtocol(mbTrans699)
		argvalue2 := Client.NewMutateSpec()
		err703 := argvalue2.Read(jsProt702)
		if err703 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.SharedMutatorRefresh(value0, value1, value2))
		fmt.Print("\n")
		break
	case "refresh_shared_mutator":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RefreshSharedMutator requires 3 args")
			flag.Usage()
		}
		argvalue0, err704 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err704 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg706 := flag.Arg(3)
		mbTrans707 := thrift.NewTMemoryBufferLen(len(arg706))
		defer mbTrans707.Close()
		_, err708 := mbTrans707.WriteString(arg706)
		if err708 != nil {
			Usage()
			return
		}
		factory709 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt710 := factory709.GetProtocol(mbTrans707)
		argvalue2 := Client.NewMutateSpec()
		err711 := argvalue2.Read(jsProt710)
		if err711 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.RefreshSharedMutator(value0, value1, value2))
		fmt.Print("\n")
		break
	case "shared_mutator_set_cells":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SharedMutatorSetCells requires 4 args")
			flag.Usage()
		}
		argvalue0, err712 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err712 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg714 := flag.Arg(3)
		mbTrans715 := thrift.NewTMemoryBufferLen(len(arg714))
		defer mbTrans715.Close()
		_, err716 := mbTrans715.WriteString(arg714)
		if err716 != nil {
			Usage()
			return
		}
		factory717 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt718 := factory717.GetProtocol(mbTrans715)
		argvalue2 := Client.NewMutateSpec()
		err719 := argvalue2.Read(jsProt718)
		if err719 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg720 := flag.Arg(4)
		mbTrans721 := thrift.NewTMemoryBufferLen(len(arg720))
		defer mbTrans721.Close()
		_, err722 := mbTrans721.WriteString(arg720)
		if err722 != nil {
			Usage()
			return
		}
		factory723 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt724 := factory723.GetProtocol(mbTrans721)
		containerStruct3 := Client.NewSharedMutatorSetCellsArgs()
		err725 := containerStruct3.ReadField4(jsProt724)
		if err725 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cells
		value3 := argvalue3
		fmt.Print(client.SharedMutatorSetCells(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "offer_cells":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OfferCells requires 4 args")
			flag.Usage()
		}
		argvalue0, err726 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err726 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg728 := flag.Arg(3)
		mbTrans729 := thrift.NewTMemoryBufferLen(len(arg728))
		defer mbTrans729.Close()
		_, err730 := mbTrans729.WriteString(arg728)
		if err730 != nil {
			Usage()
			return
		}
		factory731 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt732 := factory731.GetProtocol(mbTrans729)
		argvalue2 := Client.NewMutateSpec()
		err733 := argvalue2.Read(jsProt732)
		if err733 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg734 := flag.Arg(4)
		mbTrans735 := thrift.NewTMemoryBufferLen(len(arg734))
		defer mbTrans735.Close()
		_, err736 := mbTrans735.WriteString(arg734)
		if err736 != nil {
			Usage()
			return
		}
		factory737 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt738 := factory737.GetProtocol(mbTrans735)
		containerStruct3 := Client.NewOfferCellsArgs()
		err739 := containerStruct3.ReadField4(jsProt738)
		if err739 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cells
		value3 := argvalue3
		fmt.Print(client.OfferCells(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "shared_mutator_set_cells_as_arrays":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SharedMutatorSetCellsAsArrays requires 4 args")
			flag.Usage()
		}
		argvalue0, err740 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err740 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg742 := flag.Arg(3)
		mbTrans743 := thrift.NewTMemoryBufferLen(len(arg742))
		defer mbTrans743.Close()
		_, err744 := mbTrans743.WriteString(arg742)
		if err744 != nil {
			Usage()
			return
		}
		factory745 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt746 := factory745.GetProtocol(mbTrans743)
		argvalue2 := Client.NewMutateSpec()
		err747 := argvalue2.Read(jsProt746)
		if err747 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg748 := flag.Arg(4)
		mbTrans749 := thrift.NewTMemoryBufferLen(len(arg748))
		defer mbTrans749.Close()
		_, err750 := mbTrans749.WriteString(arg748)
		if err750 != nil {
			Usage()
			return
		}
		factory751 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt752 := factory751.GetProtocol(mbTrans749)
		containerStruct3 := Client.NewSharedMutatorSetCellsAsArraysArgs()
		err753 := containerStruct3.ReadField4(jsProt752)
		if err753 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cells
		value3 := argvalue3
		fmt.Print(client.SharedMutatorSetCellsAsArrays(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "offer_cells_as_arrays":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OfferCellsAsArrays requires 4 args")
			flag.Usage()
		}
		argvalue0, err754 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err754 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg756 := flag.Arg(3)
		mbTrans757 := thrift.NewTMemoryBufferLen(len(arg756))
		defer mbTrans757.Close()
		_, err758 := mbTrans757.WriteString(arg756)
		if err758 != nil {
			Usage()
			return
		}
		factory759 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt760 := factory759.GetProtocol(mbTrans757)
		argvalue2 := Client.NewMutateSpec()
		err761 := argvalue2.Read(jsProt760)
		if err761 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg762 := flag.Arg(4)
		mbTrans763 := thrift.NewTMemoryBufferLen(len(arg762))
		defer mbTrans763.Close()
		_, err764 := mbTrans763.WriteString(arg762)
		if err764 != nil {
			Usage()
			return
		}
		factory765 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt766 := factory765.GetProtocol(mbTrans763)
		containerStruct3 := Client.NewOfferCellsAsArraysArgs()
		err767 := containerStruct3.ReadField4(jsProt766)
		if err767 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cells
		value3 := argvalue3
		fmt.Print(client.OfferCellsAsArrays(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "shared_mutator_set_cell":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SharedMutatorSetCell requires 4 args")
			flag.Usage()
		}
		argvalue0, err768 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err768 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg770 := flag.Arg(3)
		mbTrans771 := thrift.NewTMemoryBufferLen(len(arg770))
		defer mbTrans771.Close()
		_, err772 := mbTrans771.WriteString(arg770)
		if err772 != nil {
			Usage()
			return
		}
		factory773 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt774 := factory773.GetProtocol(mbTrans771)
		argvalue2 := Client.NewMutateSpec()
		err775 := argvalue2.Read(jsProt774)
		if err775 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg776 := flag.Arg(4)
		mbTrans777 := thrift.NewTMemoryBufferLen(len(arg776))
		defer mbTrans777.Close()
		_, err778 := mbTrans777.WriteString(arg776)
		if err778 != nil {
			Usage()
			return
		}
		factory779 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt780 := factory779.GetProtocol(mbTrans777)
		argvalue3 := Client.NewCell()
		err781 := argvalue3.Read(jsProt780)
		if err781 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.SharedMutatorSetCell(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "offer_cell":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OfferCell requires 4 args")
			flag.Usage()
		}
		argvalue0, err782 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err782 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg784 := flag.Arg(3)
		mbTrans785 := thrift.NewTMemoryBufferLen(len(arg784))
		defer mbTrans785.Close()
		_, err786 := mbTrans785.WriteString(arg784)
		if err786 != nil {
			Usage()
			return
		}
		factory787 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt788 := factory787.GetProtocol(mbTrans785)
		argvalue2 := Client.NewMutateSpec()
		err789 := argvalue2.Read(jsProt788)
		if err789 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg790 := flag.Arg(4)
		mbTrans791 := thrift.NewTMemoryBufferLen(len(arg790))
		defer mbTrans791.Close()
		_, err792 := mbTrans791.WriteString(arg790)
		if err792 != nil {
			Usage()
			return
		}
		factory793 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt794 := factory793.GetProtocol(mbTrans791)
		argvalue3 := Client.NewCell()
		err795 := argvalue3.Read(jsProt794)
		if err795 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.OfferCell(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "shared_mutator_set_cell_as_array":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "SharedMutatorSetCellAsArray requires 4 args")
			flag.Usage()
		}
		argvalue0, err796 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err796 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg798 := flag.Arg(3)
		mbTrans799 := thrift.NewTMemoryBufferLen(len(arg798))
		defer mbTrans799.Close()
		_, err800 := mbTrans799.WriteString(arg798)
		if err800 != nil {
			Usage()
			return
		}
		factory801 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt802 := factory801.GetProtocol(mbTrans799)
		argvalue2 := Client.NewMutateSpec()
		err803 := argvalue2.Read(jsProt802)
		if err803 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg804 := flag.Arg(4)
		mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
		defer mbTrans805.Close()
		_, err806 := mbTrans805.WriteString(arg804)
		if err806 != nil {
			Usage()
			return
		}
		factory807 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt808 := factory807.GetProtocol(mbTrans805)
		containerStruct3 := Client.NewSharedMutatorSetCellAsArrayArgs()
		err809 := containerStruct3.ReadField4(jsProt808)
		if err809 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cell
		value3 := Client.CellAsArray(argvalue3)
		fmt.Print(client.SharedMutatorSetCellAsArray(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "offer_cell_as_array":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OfferCellAsArray requires 4 args")
			flag.Usage()
		}
		argvalue0, err810 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err810 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg812 := flag.Arg(3)
		mbTrans813 := thrift.NewTMemoryBufferLen(len(arg812))
		defer mbTrans813.Close()
		_, err814 := mbTrans813.WriteString(arg812)
		if err814 != nil {
			Usage()
			return
		}
		factory815 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt816 := factory815.GetProtocol(mbTrans813)
		argvalue2 := Client.NewMutateSpec()
		err817 := argvalue2.Read(jsProt816)
		if err817 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg818 := flag.Arg(4)
		mbTrans819 := thrift.NewTMemoryBufferLen(len(arg818))
		defer mbTrans819.Close()
		_, err820 := mbTrans819.WriteString(arg818)
		if err820 != nil {
			Usage()
			return
		}
		factory821 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt822 := factory821.GetProtocol(mbTrans819)
		containerStruct3 := Client.NewOfferCellAsArrayArgs()
		err823 := containerStruct3.ReadField4(jsProt822)
		if err823 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Cell
		value3 := Client.CellAsArray(argvalue3)
		fmt.Print(client.OfferCellAsArray(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mutator_open":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MutatorOpen requires 4 args")
			flag.Usage()
		}
		argvalue0, err824 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err824 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err826 := (strconv.Atoi(flag.Arg(3)))
		if err826 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err827 := (strconv.Atoi(flag.Arg(4)))
		if err827 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.MutatorOpen(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "open_mutator":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OpenMutator requires 4 args")
			flag.Usage()
		}
		argvalue0, err828 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err828 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err830 := (strconv.Atoi(flag.Arg(3)))
		if err830 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		tmp3, err831 := (strconv.Atoi(flag.Arg(4)))
		if err831 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.OpenMutator(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "async_mutator_open":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorOpen requires 4 args")
			flag.Usage()
		}
		argvalue0, err832 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err832 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err834 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err834 != nil {
			Usage()
			return
		}
		value2 := Client.Future(argvalue2)
		tmp3, err835 := (strconv.Atoi(flag.Arg(4)))
		if err835 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.AsyncMutatorOpen(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "open_mutator_async":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "OpenMutatorAsync requires 4 args")
			flag.Usage()
		}
		argvalue0, err836 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err836 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err838 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err838 != nil {
			Usage()
			return
		}
		value2 := Client.Future(argvalue2)
		tmp3, err839 := (strconv.Atoi(flag.Arg(4)))
		if err839 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.OpenMutatorAsync(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mutator_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MutatorClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err840 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err840 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		fmt.Print(client.MutatorClose(value0))
		fmt.Print("\n")
		break
	case "close_mutator":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseMutator requires 1 args")
			flag.Usage()
		}
		argvalue0, err841 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err841 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		fmt.Print(client.CloseMutator(value0))
		fmt.Print("\n")
		break
	case "async_mutator_cancel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorCancel requires 1 args")
			flag.Usage()
		}
		argvalue0, err842 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err842 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.AsyncMutatorCancel(value0))
		fmt.Print("\n")
		break
	case "cancel_mutator_async":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelMutatorAsync requires 1 args")
			flag.Usage()
		}
		argvalue0, err843 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err843 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.CancelMutatorAsync(value0))
		fmt.Print("\n")
		break
	case "async_mutator_close":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorClose requires 1 args")
			flag.Usage()
		}
		argvalue0, err844 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err844 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.AsyncMutatorClose(value0))
		fmt.Print("\n")
		break
	case "close_mutator_async":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CloseMutatorAsync requires 1 args")
			flag.Usage()
		}
		argvalue0, err845 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err845 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.CloseMutatorAsync(value0))
		fmt.Print("\n")
		break
	case "mutator_set_cell":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutatorSetCell requires 2 args")
			flag.Usage()
		}
		argvalue0, err846 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err846 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		arg847 := flag.Arg(2)
		mbTrans848 := thrift.NewTMemoryBufferLen(len(arg847))
		defer mbTrans848.Close()
		_, err849 := mbTrans848.WriteString(arg847)
		if err849 != nil {
			Usage()
			return
		}
		factory850 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt851 := factory850.GetProtocol(mbTrans848)
		argvalue1 := Client.NewCell()
		err852 := argvalue1.Read(jsProt851)
		if err852 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.MutatorSetCell(value0, value1))
		fmt.Print("\n")
		break
	case "set_cell":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCell requires 3 args")
			flag.Usage()
		}
		argvalue0, err853 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err853 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg855 := flag.Arg(3)
		mbTrans856 := thrift.NewTMemoryBufferLen(len(arg855))
		defer mbTrans856.Close()
		_, err857 := mbTrans856.WriteString(arg855)
		if err857 != nil {
			Usage()
			return
		}
		factory858 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt859 := factory858.GetProtocol(mbTrans856)
		argvalue2 := Client.NewCell()
		err860 := argvalue2.Read(jsProt859)
		if err860 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.SetCell(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutator_set_cell_as_array":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutatorSetCellAsArray requires 2 args")
			flag.Usage()
		}
		argvalue0, err861 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err861 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		arg862 := flag.Arg(2)
		mbTrans863 := thrift.NewTMemoryBufferLen(len(arg862))
		defer mbTrans863.Close()
		_, err864 := mbTrans863.WriteString(arg862)
		if err864 != nil {
			Usage()
			return
		}
		factory865 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt866 := factory865.GetProtocol(mbTrans863)
		containerStruct1 := Client.NewMutatorSetCellAsArrayArgs()
		err867 := containerStruct1.ReadField2(jsProt866)
		if err867 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cell
		value1 := Client.CellAsArray(argvalue1)
		fmt.Print(client.MutatorSetCellAsArray(value0, value1))
		fmt.Print("\n")
		break
	case "set_cell_as_array":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCellAsArray requires 3 args")
			flag.Usage()
		}
		argvalue0, err868 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err868 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg870 := flag.Arg(3)
		mbTrans871 := thrift.NewTMemoryBufferLen(len(arg870))
		defer mbTrans871.Close()
		_, err872 := mbTrans871.WriteString(arg870)
		if err872 != nil {
			Usage()
			return
		}
		factory873 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt874 := factory873.GetProtocol(mbTrans871)
		containerStruct2 := Client.NewSetCellAsArrayArgs()
		err875 := containerStruct2.ReadField3(jsProt874)
		if err875 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Cell
		value2 := Client.CellAsArray(argvalue2)
		fmt.Print(client.SetCellAsArray(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutator_set_cells":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutatorSetCells requires 2 args")
			flag.Usage()
		}
		argvalue0, err876 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err876 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		arg877 := flag.Arg(2)
		mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
		defer mbTrans878.Close()
		_, err879 := mbTrans878.WriteString(arg877)
		if err879 != nil {
			Usage()
			return
		}
		factory880 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt881 := factory880.GetProtocol(mbTrans878)
		containerStruct1 := Client.NewMutatorSetCellsArgs()
		err882 := containerStruct1.ReadField2(jsProt881)
		if err882 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.MutatorSetCells(value0, value1))
		fmt.Print("\n")
		break
	case "set_cells":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCells requires 3 args")
			flag.Usage()
		}
		argvalue0, err883 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err883 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg885 := flag.Arg(3)
		mbTrans886 := thrift.NewTMemoryBufferLen(len(arg885))
		defer mbTrans886.Close()
		_, err887 := mbTrans886.WriteString(arg885)
		if err887 != nil {
			Usage()
			return
		}
		factory888 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt889 := factory888.GetProtocol(mbTrans886)
		containerStruct2 := Client.NewSetCellsArgs()
		err890 := containerStruct2.ReadField3(jsProt889)
		if err890 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Cells
		value2 := argvalue2
		fmt.Print(client.SetCells(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutator_set_cells_as_arrays":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MutatorSetCellsAsArrays requires 2 args")
			flag.Usage()
		}
		argvalue0, err891 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err891 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		arg892 := flag.Arg(2)
		mbTrans893 := thrift.NewTMemoryBufferLen(len(arg892))
		defer mbTrans893.Close()
		_, err894 := mbTrans893.WriteString(arg892)
		if err894 != nil {
			Usage()
			return
		}
		factory895 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt896 := factory895.GetProtocol(mbTrans893)
		containerStruct1 := Client.NewMutatorSetCellsAsArraysArgs()
		err897 := containerStruct1.ReadField2(jsProt896)
		if err897 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.MutatorSetCellsAsArrays(value0, value1))
		fmt.Print("\n")
		break
	case "set_cells_as_arrays":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCellsAsArrays requires 3 args")
			flag.Usage()
		}
		argvalue0, err898 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err898 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg900 := flag.Arg(3)
		mbTrans901 := thrift.NewTMemoryBufferLen(len(arg900))
		defer mbTrans901.Close()
		_, err902 := mbTrans901.WriteString(arg900)
		if err902 != nil {
			Usage()
			return
		}
		factory903 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt904 := factory903.GetProtocol(mbTrans901)
		containerStruct2 := Client.NewSetCellsAsArraysArgs()
		err905 := containerStruct2.ReadField3(jsProt904)
		if err905 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Cells
		value2 := argvalue2
		fmt.Print(client.SetCellsAsArrays(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutator_set_cells_serialized":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MutatorSetCellsSerialized requires 3 args")
			flag.Usage()
		}
		argvalue0, err906 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err906 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Client.CellsSerialized(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.MutatorSetCellsSerialized(value0, value1, value2))
		fmt.Print("\n")
		break
	case "set_cells_serialized":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCellsSerialized requires 3 args")
			flag.Usage()
		}
		argvalue0, err909 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err909 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := Client.CellsSerialized(argvalue2)
		fmt.Print(client.SetCellsSerialized(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutator_flush":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MutatorFlush requires 1 args")
			flag.Usage()
		}
		argvalue0, err912 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err912 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		fmt.Print(client.MutatorFlush(value0))
		fmt.Print("\n")
		break
	case "flush_mutator":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FlushMutator requires 1 args")
			flag.Usage()
		}
		argvalue0, err913 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err913 != nil {
			Usage()
			return
		}
		value0 := Client.Mutator(argvalue0)
		fmt.Print(client.FlushMutator(value0))
		fmt.Print("\n")
		break
	case "async_mutator_set_cell":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorSetCell requires 2 args")
			flag.Usage()
		}
		argvalue0, err914 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err914 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg915 := flag.Arg(2)
		mbTrans916 := thrift.NewTMemoryBufferLen(len(arg915))
		defer mbTrans916.Close()
		_, err917 := mbTrans916.WriteString(arg915)
		if err917 != nil {
			Usage()
			return
		}
		factory918 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt919 := factory918.GetProtocol(mbTrans916)
		argvalue1 := Client.NewCell()
		err920 := argvalue1.Read(jsProt919)
		if err920 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AsyncMutatorSetCell(value0, value1))
		fmt.Print("\n")
		break
	case "set_cell_async":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetCellAsync requires 2 args")
			flag.Usage()
		}
		argvalue0, err921 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err921 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg922 := flag.Arg(2)
		mbTrans923 := thrift.NewTMemoryBufferLen(len(arg922))
		defer mbTrans923.Close()
		_, err924 := mbTrans923.WriteString(arg922)
		if err924 != nil {
			Usage()
			return
		}
		factory925 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt926 := factory925.GetProtocol(mbTrans923)
		argvalue1 := Client.NewCell()
		err927 := argvalue1.Read(jsProt926)
		if err927 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetCellAsync(value0, value1))
		fmt.Print("\n")
		break
	case "async_mutator_set_cell_as_array":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorSetCellAsArray requires 2 args")
			flag.Usage()
		}
		argvalue0, err928 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err928 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg929 := flag.Arg(2)
		mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
		defer mbTrans930.Close()
		_, err931 := mbTrans930.WriteString(arg929)
		if err931 != nil {
			Usage()
			return
		}
		factory932 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt933 := factory932.GetProtocol(mbTrans930)
		containerStruct1 := Client.NewAsyncMutatorSetCellAsArrayArgs()
		err934 := containerStruct1.ReadField2(jsProt933)
		if err934 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cell
		value1 := Client.CellAsArray(argvalue1)
		fmt.Print(client.AsyncMutatorSetCellAsArray(value0, value1))
		fmt.Print("\n")
		break
	case "set_cell_as_array_async":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetCellAsArrayAsync requires 2 args")
			flag.Usage()
		}
		argvalue0, err935 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err935 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg936 := flag.Arg(2)
		mbTrans937 := thrift.NewTMemoryBufferLen(len(arg936))
		defer mbTrans937.Close()
		_, err938 := mbTrans937.WriteString(arg936)
		if err938 != nil {
			Usage()
			return
		}
		factory939 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt940 := factory939.GetProtocol(mbTrans937)
		containerStruct1 := Client.NewSetCellAsArrayAsyncArgs()
		err941 := containerStruct1.ReadField2(jsProt940)
		if err941 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cell
		value1 := Client.CellAsArray(argvalue1)
		fmt.Print(client.SetCellAsArrayAsync(value0, value1))
		fmt.Print("\n")
		break
	case "async_mutator_set_cells":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorSetCells requires 2 args")
			flag.Usage()
		}
		argvalue0, err942 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err942 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg943 := flag.Arg(2)
		mbTrans944 := thrift.NewTMemoryBufferLen(len(arg943))
		defer mbTrans944.Close()
		_, err945 := mbTrans944.WriteString(arg943)
		if err945 != nil {
			Usage()
			return
		}
		factory946 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt947 := factory946.GetProtocol(mbTrans944)
		containerStruct1 := Client.NewAsyncMutatorSetCellsArgs()
		err948 := containerStruct1.ReadField2(jsProt947)
		if err948 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.AsyncMutatorSetCells(value0, value1))
		fmt.Print("\n")
		break
	case "set_cells_async":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetCellsAsync requires 2 args")
			flag.Usage()
		}
		argvalue0, err949 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err949 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg950 := flag.Arg(2)
		mbTrans951 := thrift.NewTMemoryBufferLen(len(arg950))
		defer mbTrans951.Close()
		_, err952 := mbTrans951.WriteString(arg950)
		if err952 != nil {
			Usage()
			return
		}
		factory953 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt954 := factory953.GetProtocol(mbTrans951)
		containerStruct1 := Client.NewSetCellsAsyncArgs()
		err955 := containerStruct1.ReadField2(jsProt954)
		if err955 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.SetCellsAsync(value0, value1))
		fmt.Print("\n")
		break
	case "async_mutator_set_cells_as_arrays":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorSetCellsAsArrays requires 2 args")
			flag.Usage()
		}
		argvalue0, err956 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err956 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg957 := flag.Arg(2)
		mbTrans958 := thrift.NewTMemoryBufferLen(len(arg957))
		defer mbTrans958.Close()
		_, err959 := mbTrans958.WriteString(arg957)
		if err959 != nil {
			Usage()
			return
		}
		factory960 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt961 := factory960.GetProtocol(mbTrans958)
		containerStruct1 := Client.NewAsyncMutatorSetCellsAsArraysArgs()
		err962 := containerStruct1.ReadField2(jsProt961)
		if err962 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.AsyncMutatorSetCellsAsArrays(value0, value1))
		fmt.Print("\n")
		break
	case "set_cells_as_arrays_async":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetCellsAsArraysAsync requires 2 args")
			flag.Usage()
		}
		argvalue0, err963 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err963 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		arg964 := flag.Arg(2)
		mbTrans965 := thrift.NewTMemoryBufferLen(len(arg964))
		defer mbTrans965.Close()
		_, err966 := mbTrans965.WriteString(arg964)
		if err966 != nil {
			Usage()
			return
		}
		factory967 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt968 := factory967.GetProtocol(mbTrans965)
		containerStruct1 := Client.NewSetCellsAsArraysAsyncArgs()
		err969 := containerStruct1.ReadField2(jsProt968)
		if err969 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Cells
		value1 := argvalue1
		fmt.Print(client.SetCellsAsArraysAsync(value0, value1))
		fmt.Print("\n")
		break
	case "async_mutator_set_cells_serialized":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorSetCellsSerialized requires 3 args")
			flag.Usage()
		}
		argvalue0, err970 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err970 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Client.CellsSerialized(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.AsyncMutatorSetCellsSerialized(value0, value1, value2))
		fmt.Print("\n")
		break
	case "set_cells_serialized_async":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetCellsSerializedAsync requires 3 args")
			flag.Usage()
		}
		argvalue0, err973 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err973 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Client.CellsSerialized(argvalue1)
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.SetCellsSerializedAsync(value0, value1, value2))
		fmt.Print("\n")
		break
	case "async_mutator_flush":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AsyncMutatorFlush requires 1 args")
			flag.Usage()
		}
		argvalue0, err976 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err976 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.AsyncMutatorFlush(value0))
		fmt.Print("\n")
		break
	case "flush_mutator_async":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FlushMutatorAsync requires 1 args")
			flag.Usage()
		}
		argvalue0, err977 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err977 != nil {
			Usage()
			return
		}
		value0 := Client.MutatorAsync(argvalue0)
		fmt.Print(client.FlushMutatorAsync(value0))
		fmt.Print("\n")
		break
	case "namespace_exists":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NamespaceExists requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.NamespaceExists(value0))
		fmt.Print("\n")
		break
	case "exists_namespace":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ExistsNamespace requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ExistsNamespace(value0))
		fmt.Print("\n")
		break
	case "exists_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ExistsTable requires 2 args")
			flag.Usage()
		}
		argvalue0, err980 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err980 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ExistsTable(value0, value1))
		fmt.Print("\n")
		break
	case "table_exists":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableExists requires 2 args")
			flag.Usage()
		}
		argvalue0, err982 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err982 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableExists(value0, value1))
		fmt.Print("\n")
		break
	case "table_get_id":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableGetId requires 2 args")
			flag.Usage()
		}
		argvalue0, err984 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err984 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableGetId(value0, value1))
		fmt.Print("\n")
		break
	case "get_table_id":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableId requires 2 args")
			flag.Usage()
		}
		argvalue0, err986 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err986 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTableId(value0, value1))
		fmt.Print("\n")
		break
	case "table_get_schema_str":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableGetSchemaStr requires 2 args")
			flag.Usage()
		}
		argvalue0, err988 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err988 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableGetSchemaStr(value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_str":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchemaStr requires 2 args")
			flag.Usage()
		}
		argvalue0, err990 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err990 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchemaStr(value0, value1))
		fmt.Print("\n")
		break
	case "table_get_schema_str_with_ids":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableGetSchemaStrWithIds requires 2 args")
			flag.Usage()
		}
		argvalue0, err992 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err992 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableGetSchemaStrWithIds(value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_str_with_ids":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchemaStrWithIds requires 2 args")
			flag.Usage()
		}
		argvalue0, err994 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err994 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchemaStrWithIds(value0, value1))
		fmt.Print("\n")
		break
	case "table_get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableGetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0, err996 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err996 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableGetSchema(value0, value1))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0, err998 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err998 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(value0, value1))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTables requires 1 args")
			flag.Usage()
		}
		argvalue0, err1000 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1000 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		fmt.Print(client.GetTables(value0))
		fmt.Print("\n")
		break
	case "namespace_get_listing":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "NamespaceGetListing requires 1 args")
			flag.Usage()
		}
		argvalue0, err1001 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1001 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		fmt.Print(client.NamespaceGetListing(value0))
		fmt.Print("\n")
		break
	case "get_listing":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetListing requires 1 args")
			flag.Usage()
		}
		argvalue0, err1002 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1002 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		fmt.Print(client.GetListing(value0))
		fmt.Print("\n")
		break
	case "table_get_splits":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "TableGetSplits requires 2 args")
			flag.Usage()
		}
		argvalue0, err1003 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1003 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.TableGetSplits(value0, value1))
		fmt.Print("\n")
		break
	case "get_table_splits":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableSplits requires 2 args")
			flag.Usage()
		}
		argvalue0, err1005 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1005 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTableSplits(value0, value1))
		fmt.Print("\n")
		break
	case "namespace_drop":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "NamespaceDrop requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.NamespaceDrop(value0, value1))
		fmt.Print("\n")
		break
	case "drop_namespace":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropNamespace requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.DropNamespace(value0, value1))
		fmt.Print("\n")
		break
	case "rename_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RenameTable requires 3 args")
			flag.Usage()
		}
		argvalue0, err1011 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1011 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.RenameTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "table_rename":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TableRename requires 3 args")
			flag.Usage()
		}
		argvalue0, err1014 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1014 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.TableRename(value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0, err1017 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1017 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "table_drop":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TableDrop requires 3 args")
			flag.Usage()
		}
		argvalue0, err1020 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1020 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.TableDrop(value0, value1, value2))
		fmt.Print("\n")
		break
	case "generate_guid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GenerateGuid requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GenerateGuid())
		fmt.Print("\n")
		break
	case "create_cell_unique":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CreateCellUnique requires 4 args")
			flag.Usage()
		}
		argvalue0, err1023 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1023 != nil {
			Usage()
			return
		}
		value0 := Client.Namespace(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1025 := flag.Arg(3)
		mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
		defer mbTrans1026.Close()
		_, err1027 := mbTrans1026.WriteString(arg1025)
		if err1027 != nil {
			Usage()
			return
		}
		factory1028 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt1029 := factory1028.GetProtocol(mbTrans1026)
		argvalue2 := Client.NewKey()
		err1030 := argvalue2.Read(jsProt1029)
		if err1030 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.CreateCellUnique(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "error_get_text":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ErrorGetText requires 1 args")
			flag.Usage()
		}
		tmp0, err1032 := (strconv.Atoi(flag.Arg(1)))
		if err1032 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.ErrorGetText(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
